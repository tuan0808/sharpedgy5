import { Injectable, Injector } from '@angular/core';
import { ModalGalleryRef } from './modal-gallery-ref';
import { ModalGalleryComponent } from './modal-gallery.component';
import { DIALOG_DATA } from './modal-gallery.tokens';
import { ComponentPortal } from '@angular/cdk/portal';
import * as i0 from "@angular/core";
import * as i1 from "./modal-gallery.service";
export class AttachToOverlayService {
    constructor(injector, modalGalleryService) {
        this.injector = injector;
        this.modalGalleryService = modalGalleryService;
    }
    /**
     * To be called by a provider with the APP_INITIALIZER token.
     */
    initialize() {
        this.modalGalleryService.triggerAttachToOverlay.subscribe(payload => this.attachToOverlay(payload));
    }
    /**
     * Private method to attach ModalGalleryComponent to the overlay.
     * @param payload {@link AttachToOverlayPayload} with all necessary information
     * @private
     */
    attachToOverlay(payload) {
        const injector = Injector.create({
            parent: this.injector,
            providers: [
                { provide: ModalGalleryRef, useValue: payload.dialogRef },
                { provide: DIALOG_DATA, useValue: payload.config }
            ]
        });
        const containerPortal = new ComponentPortal(ModalGalleryComponent, null, injector);
        payload.overlayRef.attach(containerPortal);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.5", ngImport: i0, type: AttachToOverlayService, deps: [{ token: i0.Injector }, { token: i1.ModalGalleryService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.5", ngImport: i0, type: AttachToOverlayService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.5", ngImport: i0, type: AttachToOverlayService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i0.Injector }, { type: i1.ModalGalleryService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNoLXRvLW92ZXJsYXkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tzODkvYW5ndWxhci1tb2RhbC1nYWxsZXJ5L3NyYy9saWIvY29tcG9uZW50cy9tb2RhbC1nYWxsZXJ5L2F0dGFjaC10by1vdmVybGF5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7OztBQUl0RCxNQUFNLE9BQU8sc0JBQXNCO0lBQ2pDLFlBQW9CLFFBQWtCLEVBQVUsbUJBQXdDO1FBQXBFLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO0lBQUcsQ0FBQztJQUU1Rjs7T0FFRztJQUNJLFVBQVU7UUFDZixJQUFJLENBQUMsbUJBQW1CLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3RHLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssZUFBZSxDQUFDLE9BQStCO1FBQ3JELE1BQU0sUUFBUSxHQUFhLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDekMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3JCLFNBQVMsRUFBRTtnQkFDVCxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUU7Z0JBQ3pELEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRTthQUNuRDtTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sZUFBZSxHQUFHLElBQUksZUFBZSxDQUFDLHFCQUFxQixFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNuRixPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM3QyxDQUFDOzhHQTFCVSxzQkFBc0I7a0hBQXRCLHNCQUFzQixjQURULE1BQU07OzJGQUNuQixzQkFBc0I7a0JBRGxDLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1vZGFsR2FsbGVyeVJlZiB9IGZyb20gJy4vbW9kYWwtZ2FsbGVyeS1yZWYnO1xuaW1wb3J0IHsgTW9kYWxHYWxsZXJ5Q29tcG9uZW50IH0gZnJvbSAnLi9tb2RhbC1nYWxsZXJ5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBESUFMT0dfREFUQSB9IGZyb20gJy4vbW9kYWwtZ2FsbGVyeS50b2tlbnMnO1xuaW1wb3J0IHsgQ29tcG9uZW50UG9ydGFsIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5pbXBvcnQgeyBBdHRhY2hUb092ZXJsYXlQYXlsb2FkLCBNb2RhbEdhbGxlcnlTZXJ2aWNlIH0gZnJvbSAnLi9tb2RhbC1nYWxsZXJ5LnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIEF0dGFjaFRvT3ZlcmxheVNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBtb2RhbEdhbGxlcnlTZXJ2aWNlOiBNb2RhbEdhbGxlcnlTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBUbyBiZSBjYWxsZWQgYnkgYSBwcm92aWRlciB3aXRoIHRoZSBBUFBfSU5JVElBTElaRVIgdG9rZW4uXG4gICAqL1xuICBwdWJsaWMgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcbiAgICB0aGlzLm1vZGFsR2FsbGVyeVNlcnZpY2UudHJpZ2dlckF0dGFjaFRvT3ZlcmxheS5zdWJzY3JpYmUocGF5bG9hZCA9PiB0aGlzLmF0dGFjaFRvT3ZlcmxheShwYXlsb2FkKSk7XG4gIH1cblxuICAvKipcbiAgICogUHJpdmF0ZSBtZXRob2QgdG8gYXR0YWNoIE1vZGFsR2FsbGVyeUNvbXBvbmVudCB0byB0aGUgb3ZlcmxheS5cbiAgICogQHBhcmFtIHBheWxvYWQge0BsaW5rIEF0dGFjaFRvT3ZlcmxheVBheWxvYWR9IHdpdGggYWxsIG5lY2Vzc2FyeSBpbmZvcm1hdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJpdmF0ZSBhdHRhY2hUb092ZXJsYXkocGF5bG9hZDogQXR0YWNoVG9PdmVybGF5UGF5bG9hZCk6IHZvaWQge1xuICAgIGNvbnN0IGluamVjdG9yOiBJbmplY3RvciA9IEluamVjdG9yLmNyZWF0ZSh7XG4gICAgICBwYXJlbnQ6IHRoaXMuaW5qZWN0b3IsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgeyBwcm92aWRlOiBNb2RhbEdhbGxlcnlSZWYsIHVzZVZhbHVlOiBwYXlsb2FkLmRpYWxvZ1JlZiB9LFxuICAgICAgICB7IHByb3ZpZGU6IERJQUxPR19EQVRBLCB1c2VWYWx1ZTogcGF5bG9hZC5jb25maWcgfVxuICAgICAgXVxuICAgIH0pO1xuXG4gICAgY29uc3QgY29udGFpbmVyUG9ydGFsID0gbmV3IENvbXBvbmVudFBvcnRhbChNb2RhbEdhbGxlcnlDb21wb25lbnQsIG51bGwsIGluamVjdG9yKTtcbiAgICBwYXlsb2FkLm92ZXJsYXlSZWYuYXR0YWNoKGNvbnRhaW5lclBvcnRhbCk7XG4gIH1cbn1cbiJdfQ==