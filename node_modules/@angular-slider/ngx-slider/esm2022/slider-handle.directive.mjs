import { Directive, HostBinding, } from '@angular/core';
import { SliderElementDirective } from './slider-element.directive';
import * as i0 from "@angular/core";
export class SliderHandleDirective extends SliderElementDirective {
    active = false;
    role = '';
    tabindex = '';
    ariaOrientation = '';
    ariaLabel = '';
    ariaLabelledBy = '';
    ariaValueNow = '';
    ariaValueText = '';
    ariaValueMin = '';
    ariaValueMax = '';
    focus() {
        this.elemRef.nativeElement.focus();
    }
    focusIfNeeded() {
        if (document.activeElement !== this.elemRef.nativeElement) {
            this.elemRef.nativeElement.focus();
        }
    }
    constructor(elemRef, renderer, changeDetectionRef) {
        super(elemRef, renderer, changeDetectionRef);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: SliderHandleDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.4", type: SliderHandleDirective, selector: "[ngxSliderHandle]", host: { properties: { "class.ngx-slider-active": "this.active", "attr.role": "this.role", "attr.tabindex": "this.tabindex", "attr.aria-orientation": "this.ariaOrientation", "attr.aria-label": "this.ariaLabel", "attr.aria-labelledby": "this.ariaLabelledBy", "attr.aria-valuenow": "this.ariaValueNow", "attr.aria-valuetext": "this.ariaValueText", "attr.aria-valuemin": "this.ariaValueMin", "attr.aria-valuemax": "this.ariaValueMax" } }, usesInheritance: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: SliderHandleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxSliderHandle]',
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }], propDecorators: { active: [{
                type: HostBinding,
                args: ['class.ngx-slider-active']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], tabindex: [{
                type: HostBinding,
                args: ['attr.tabindex']
            }], ariaOrientation: [{
                type: HostBinding,
                args: ['attr.aria-orientation']
            }], ariaLabel: [{
                type: HostBinding,
                args: ['attr.aria-label']
            }], ariaLabelledBy: [{
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }], ariaValueNow: [{
                type: HostBinding,
                args: ['attr.aria-valuenow']
            }], ariaValueText: [{
                type: HostBinding,
                args: ['attr.aria-valuetext']
            }], ariaValueMin: [{
                type: HostBinding,
                args: ['attr.aria-valuemin']
            }], ariaValueMax: [{
                type: HostBinding,
                args: ['attr.aria-valuemax']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWhhbmRsZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbmd4LXNsaWRlci9saWIvc2xpZGVyLWhhbmRsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFHVCxXQUFXLEdBRVosTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7O0FBS3BFLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxzQkFBc0I7SUFFL0QsTUFBTSxHQUFZLEtBQUssQ0FBQztJQUd4QixJQUFJLEdBQVcsRUFBRSxDQUFDO0lBR2xCLFFBQVEsR0FBVyxFQUFFLENBQUM7SUFHdEIsZUFBZSxHQUFXLEVBQUUsQ0FBQztJQUc3QixTQUFTLEdBQVcsRUFBRSxDQUFDO0lBR3ZCLGNBQWMsR0FBVyxFQUFFLENBQUM7SUFHNUIsWUFBWSxHQUFXLEVBQUUsQ0FBQztJQUcxQixhQUFhLEdBQVcsRUFBRSxDQUFDO0lBRzNCLFlBQVksR0FBVyxFQUFFLENBQUM7SUFHMUIsWUFBWSxHQUFXLEVBQUUsQ0FBQztJQUUxQixLQUFLO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVELGFBQWE7UUFDWCxJQUFJLFFBQVEsQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUMxRCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNyQyxDQUFDO0lBQ0gsQ0FBQztJQUVELFlBQ0UsT0FBbUIsRUFDbkIsUUFBbUIsRUFDbkIsa0JBQXFDO1FBRXJDLEtBQUssQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDL0MsQ0FBQzt1R0EvQ1UscUJBQXFCOzJGQUFyQixxQkFBcUI7OzJGQUFyQixxQkFBcUI7a0JBSGpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtpQkFDOUI7dUlBR0MsTUFBTTtzQkFETCxXQUFXO3VCQUFDLHlCQUF5QjtnQkFJdEMsSUFBSTtzQkFESCxXQUFXO3VCQUFDLFdBQVc7Z0JBSXhCLFFBQVE7c0JBRFAsV0FBVzt1QkFBQyxlQUFlO2dCQUk1QixlQUFlO3NCQURkLFdBQVc7dUJBQUMsdUJBQXVCO2dCQUlwQyxTQUFTO3NCQURSLFdBQVc7dUJBQUMsaUJBQWlCO2dCQUk5QixjQUFjO3NCQURiLFdBQVc7dUJBQUMsc0JBQXNCO2dCQUluQyxZQUFZO3NCQURYLFdBQVc7dUJBQUMsb0JBQW9CO2dCQUlqQyxhQUFhO3NCQURaLFdBQVc7dUJBQUMscUJBQXFCO2dCQUlsQyxZQUFZO3NCQURYLFdBQVc7dUJBQUMsb0JBQW9CO2dCQUlqQyxZQUFZO3NCQURYLFdBQVc7dUJBQUMsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBSZW5kZXJlcjIsXG4gIEhvc3RCaW5kaW5nLFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTbGlkZXJFbGVtZW50RGlyZWN0aXZlIH0gZnJvbSAnLi9zbGlkZXItZWxlbWVudC5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmd4U2xpZGVySGFuZGxlXScsXG59KVxuZXhwb3J0IGNsYXNzIFNsaWRlckhhbmRsZURpcmVjdGl2ZSBleHRlbmRzIFNsaWRlckVsZW1lbnREaXJlY3RpdmUge1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLm5neC1zbGlkZXItYWN0aXZlJylcbiAgYWN0aXZlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKVxuICByb2xlOiBzdHJpbmcgPSAnJztcblxuICBASG9zdEJpbmRpbmcoJ2F0dHIudGFiaW5kZXgnKVxuICB0YWJpbmRleDogc3RyaW5nID0gJyc7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtb3JpZW50YXRpb24nKVxuICBhcmlhT3JpZW50YXRpb246IHN0cmluZyA9ICcnO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLWxhYmVsJylcbiAgYXJpYUxhYmVsOiBzdHJpbmcgPSAnJztcblxuICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1sYWJlbGxlZGJ5JylcbiAgYXJpYUxhYmVsbGVkQnk6IHN0cmluZyA9ICcnO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLXZhbHVlbm93JylcbiAgYXJpYVZhbHVlTm93OiBzdHJpbmcgPSAnJztcblxuICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS12YWx1ZXRleHQnKVxuICBhcmlhVmFsdWVUZXh0OiBzdHJpbmcgPSAnJztcblxuICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS12YWx1ZW1pbicpXG4gIGFyaWFWYWx1ZU1pbjogc3RyaW5nID0gJyc7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtdmFsdWVtYXgnKVxuICBhcmlhVmFsdWVNYXg6IHN0cmluZyA9ICcnO1xuXG4gIGZvY3VzKCk6IHZvaWQge1xuICAgIHRoaXMuZWxlbVJlZi5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gIH1cblxuICBmb2N1c0lmTmVlZGVkKCk6IHZvaWQge1xuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSB0aGlzLmVsZW1SZWYubmF0aXZlRWxlbWVudCkge1xuICAgICAgdGhpcy5lbGVtUmVmLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBlbGVtUmVmOiBFbGVtZW50UmVmLFxuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgY2hhbmdlRGV0ZWN0aW9uUmVmOiBDaGFuZ2VEZXRlY3RvclJlZlxuICApIHtcbiAgICBzdXBlcihlbGVtUmVmLCByZW5kZXJlciwgY2hhbmdlRGV0ZWN0aW9uUmVmKTtcbiAgfVxufVxuIl19